#!/usr/bin/env python3

from pysh import proc, wait, check, now, get, to
import json
from blessed import Terminal
from collections import defaultdict
from ipaddress import ip_address


def dash_default(dictlike):
    return defaultdict(lambda: '---', **dictlike)


def make_color(n):
    r, g, b = ((n >> s) & 0xFF for s in (16, 8, 0))
    return r, g, b


start = to('ip -json {} show'.format) & proc.o
finish = wait & check & get.stdout & to(json.loads)
addr_data, route_data = ('addr', 'route') | +start | now | +finish

# I think this is probably the default anyway, but just in case:
route_data = sorted(
    route_data,
    key=lambda d: (d.get('dst') != 'default', d['metric']),
)

interfaces = { d['ifname']: dash_default(d) for d in addr_data }
for data in interfaces.values():
    data['addr_info'] = [ dash_default(d) for d in data['addr_info'] ]

terminal = Terminal()
c_table_name = terminal.bold_orange
c_heading = terminal.bold_white
c_name = terminal.bold_white
get_width = terminal.length

# let's assume there won't be more than 99 default routes
SUPERSCRIPT = ( f'{a}{b}'.lstrip() for a in ' ¹²³⁴⁵⁶⁷⁸⁹' for b in '⁰¹²³⁴⁵⁶⁷⁸⁹' )
SUPERSCRIPT = [
    terminal.bold(terminal.color_rgb(*make_color(color))(num))
    for color, num in zip(
        (0xFFFFFF, 0x00FF00, 0xFFFF00, 0xFF7F00) + (0xFFFFFF,) * 96,
        SUPERSCRIPT,
    )
]

STATUS = {
    'UNKNOWN': '',
    'UP': terminal.bold_green('  ✔ '),
    'DOWN': terminal.bold_red('  ✘ '),
}


def justify(n):
    if n > 0:
        yield terminal.rjust
    for _ in range(n - 2):
        yield terminal.ljust
    if n > 1:
        yield lambda x, width: x


def print_table(rows):
    widths = [ max(get_width(name) for name in column) for column in zip(*rows) ]
    for row in rows:
        print(*(just(cell, width) for just, cell, width in zip(justify(len(row)), row, widths)), sep='  ')


for family, version in ('inet', 4), ('inet6', 6):
    print(c_table_name(f'IPv{version}'))
    rows = []
    rows.append([ c_heading(n) for n in ('Interface', 'Address', 'Netmask', 'Broadcast', 'Gateway') ])
    for name, data in interfaces.items():
        for info in data['addr_info']:
            if info['family'] != family:
                continue
            gateways = [
                (d['gateway'], SUPERSCRIPT[i] if d['dst'] == 'default' else f' ({d["dst"]})')
                for i, d in enumerate(route_data, start=1)
                if 'gateway' in d and d['dev'] == name and ip_address(d['gateway']).version == version
            ]
            gateway = ', '.join(f'{k}{v}' for k, v in gateways) if gateways else '---'
            rows.append([ c_name(name), info['local'], f'/{info["prefixlen"]}', info['broadcast'], gateway ])
    print_table(rows)
    print()

print(c_table_name('MAC'))
rows = []
rows.append([ c_heading(n) for n in ('Interface', 'Address', 'Broadcast', 'Status') ])
for name, data in interfaces.items():
    status = data['operstate']
    status = STATUS.get(status, status)
    rows.append([ c_name(name), data['address'], data['broadcast'], status ])
print_table(rows)
